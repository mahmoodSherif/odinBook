openapi: "3.0.0"
info:
  version: 0.0.1
  title: odinBook
  description: facebook clone
  contact:
    name: odinBook
servers:
- url: https://cool-odin-book.herokuapp.com
  description: Development server
paths:
# users
  /profile:
    get:
      tags:
        - users
      summary: "get current user data"
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/fullUserData'
        401:
          $ref: "#/components/responses/unauthorized"
  /users:
    post:
      tags:
      - users
      summary: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
      responses:
        200:
         $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/invalidData'
          
  /users/{id}:
    get:
      tags: 
      - users
      summary: "get user data"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/user'
        404:
          description: user not founded

  /login:
    post:
      tags: 
      - users
      summary: "login user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
      responses:
        200:
          $ref: "#/components/responses/login"
        400:
          description: "invalid data"

  /friends:
    get:
      tags: 
      - friends
      summary: "get user friends"
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/basicUsers"
        401:
          $ref: "#/components/responses/unauthorized"

  /friends/requests:
    get:
      tags: 
      - friends
      summary: "get user friend requests"
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/basicUsers"
        401:
          $ref: "#/components/responses/unauthorized"
    post:
      tags:
        - friends
      summary: "sent a new friend request to user"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/components/responses/unauthorized"

  /friends/requests/{userId}:
    put:
      tags:
      - friends
      summary: "respond to friend request"
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                response:
                  type: string
                  enum:
                  - accept
                  - reject
      responses:
        200:
          description: "OK"
        401:
          $ref: "#/components/responses/unauthorized"
      
    
  /friends/requests/sent:
    get:
      tags: 
      - friends
      summary: "get user sent friend requests"
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/basicUsers"
        401:
          $ref: "#/components/responses/unauthorized"
# posts
  /users/{id}/posts:
     get:
      tags: 
      - posts
      summary: "get user posts"
      security: 
      - bearerAuth: []
      parameters:
      - in: path
        name: id
        required: true
        description: "user id"
        schema:
          type: string
      responses:
        200:
          $ref: "#/components/responses/posts"
        404:
          description: user not founded  
  
  /posts:
    post:
      tags: 
      - posts
      summary: create a new post
      security: 
      - bearerAuth: []
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/createPost'
      responses:
        200:
          $ref: '#/components/responses/post'
        400:
          $ref: '#/components/responses/invalidData'
        401:
          $ref: '#/components/responses/unauthorized' 
    get: 
      tags:
      - posts 
      summary: get all posts (for testing will be removed soon)
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/posts'
        401:
          $ref: '#/components/responses/unauthorized'
  /feed:
    get:
      tags:
      - posts 
      summary: get feed posts
      security: 
      - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/posts'
        401:
          $ref: '#/components/responses/unauthorized'
  /posts/{id}:
    get:
      tags: 
      - posts
      summary: "get post data"
      security: 
      - bearerAuth: []
      parameters: 
      - in: path
        name: id
        required: true
        description: post id
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/post'
        404:
          description: post not founded
        401:
          $ref: '#/components/responses/unauthorized'
# comments 
  /posts/{postId}/comments:
    get:
      tags:
      - comments
      summary: "get all comments on post"
      security: 
      - bearerAuth: []
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/comments'
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          description: post not founded
    post:
      tags: 
      - comments
      summary: create a new comment
      security: 
      - bearerAuth: []
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/createComment'
      responses:
        200:
          $ref: '#/components/responses/comment'
        400:
          $ref: '#/components/responses/invalidData'
        401:
          $ref: '#/components/responses/unauthorized'
# likes 
  /posts/{postId}/likes:
    post:
      tags:
      - likes
      summary: add like to the post
      security: 
        - bearerAuth: []
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      responses:
        200:
          description: "like added"
    get:
      tags:
        - likes
      summary: get all users who liked this post
      parameters: 
      - in: path
        name: postId
        required: true
        description: post id
        schema:
          type: string
      responses:
        200: 
          $ref: '#/components/responses/basicUsers'
# chats
  /chats/:
    get:
      tags:
        - chats
      summary: get all chats for the current user
      security: 
        - bearerAuth: []
      responses:
        200:
          $ref: "#/components/responses/chats"
        401:
          $ref: "#/components/responses/unauthorized"
    post:
      tags:
        - chats
      summary: create a new chat
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: user id
      responses:
        200:
          $ref: "#/components/responses/chat"
        401:
          $ref: "#/components/responses/unauthorized"

  /chats/{chatId}/:
    get:
      tags:
        - chats
      summary: get chat with id 
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/chat"
        401:
          $ref: "#/components/responses/unauthorized"
  /chats/{chatId}/messages/:
    post:
      tags:
        - chats
      summary: create a new message
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/basicMessage"
      responses:
        200:
          $ref: "#/components/responses/message"
        401:
          $ref: "#/components/responses/unauthorized"
    put:
      tags:
        - chats
      summary: edit the chat messages states
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  $ref: "#/components/schemas/messageState"
      responses:
        200:
          $ref: "#/components/responses/message"
        401:
          $ref: "#/components/responses/unauthorized"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# schemas 
  schemas:
  # helpers
    postType:
      type: string
      enum:
      - "text"
    commentType:
      type: string
      enum:
      - "text"
    messageType:
      type: string
      enum:
        - "text"
    messageState:
      type: string
      enum:
        - "hold"
        - "received"
        - "read"
    errors:
      type: object
      properties:
        errors:
          type: array
          items: 
            type: string
  # users
    basicUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        photoUrl:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
    user:
      allOf:
        - $ref: '#/components/schemas/basicUser'
        - type: "object"
          properties:
            _id:
              type: string
        
    createUser:
      allOf:
        - $ref: '#/components/schemas/basicUser'
        - type: "object"
          required: 
          - firstName
          - lastName
          - email
          - password
          properties:
            password:
              type: string

    loginUser:
      type: object
      properties:
        email:
            type: string
        password:
          type: string
    users:
      type: array
      items:
        $ref: '#/components/schemas/user'
  # posts
    post:
      type: "object"
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/basicUser'
        type:
          $ref: '#/components/schemas/postType'
        text: 
          type: string
          description: "post text content"
        likes:
          type: number
        createdAt:
          type: string
          format: "date"
    createPost:
      properties:
        type:
          $ref: '#/components/schemas/postType'
        text:
          type: string
          description: "post text content"
    posts:
      type: array
      items:
        $ref: '#/components/schemas/post'
  # comments
    comment:
      type: "object"
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/basicUser'
        type:
          $ref: '#/components/schemas/commentType'
        text: 
          type: string
          description: "post text content"
        likes:
          type: "array"
          items:
            type: string
        createdAt:
          type: string
          format: "date"
    createComment:
     properties:
        type:
          $ref: '#/components/schemas/commentType'
        text:
          type: string
          description: "comment text content" 
  # chats
    message:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
          description: userId
        state:
          $ref: "#/components/schemas/messageState"
        type:
          $ref: "#/components/schemas/messageType"
        text:
          type: string
    basicMessage:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/messageType"
        text:
          type: string
    chat:
      type: object
      properties:
        _id:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/basicUser'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/message'
    lastMessageChat:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/basicUser'
        lastMessage:
          $ref: '#/components/schemas/message'   
# responses
  responses:
  # errors
    invalidData:
      description: invalid data
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/errors'
    unauthorized:
      description: user not authorized to do this action
  # users
    login:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/user'
              token:
                type: string
    user:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    
    basicUsers:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items: 
              $ref: '#/components/schemas/basicUser' 
    fullUserData:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
              - type: object
                properties:
                  posts: 
                    $ref: '#/components/schemas/posts'
              - type: object
                properties:
                  friends: 
                    $ref: "#/components/schemas/users"            
  # posts
    posts:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/post'
    post:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/post'
  # comments
    comments:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/comment'
    comment:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/comment'
  # chats
    chats:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/lastMessageChat"
    chat:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/chat"
    message:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"